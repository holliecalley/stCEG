if (!is.null(clicked_id)) {
# Get the current selection state (list of selected polygons)
current_selection <- selected_polygon()
# Print the current selection to debug
print(paste("Current selected polygon(s):", toString(current_selection)))
# Check if the clicked polygon is already selected
if (clicked_id %in% current_selection) {
# Deselect the polygon if it is already selected (remove from selection)
updated_selection <- setdiff(current_selection, clicked_id)
selected_polygon(updated_selection)
# Remove the highlight by clearing the "highlighted" group
leafletProxy("map") %>%
clearGroup("highlighted")
print(paste("Deselected polygon:", clicked_id))  # Debugging print
} else {
# Select the polygon if it is not already selected (add to selection)
updated_selection <- c(current_selection, clicked_id)
selected_polygon(updated_selection)
print(paste("Selected polygon:", clicked_id))  # Debugging print
}
# Print the updated list of selected polygons
print(paste("Updated selected polygon(s):", toString(selected_polygon())))
}
})
first_floret <- reactiveVal(NULL)
all_florets <- reactiveVal(NULL)
# Show the modal when the button is clicked
observeEvent(input$showFloretModal, {
clicked_id <- selected_polygon()
if (!is.null(clicked_id)) {
shape_data <- shapefileData()
visoutputdata <- updated_graph_data()
primary_id <- clicked_id[1]
leafletProxy("map") %>%
clearGroup("highlighted")
# Initialize an empty list to store all florets
florets_list <- list()
floret_colors_list <- list()
# Iterate through clicked IDs to extract florets
for (id in clicked_id) {
clicked_data <- shape_data[shape_data[[1]] == id, ]  # Use the current ID
start_label1 <- clicked_data[[1, 1]]
floret3 <- tryCatch({
extract_floret(visoutputdata$nodes, visoutputdata$edges, start_label1)
}, error = function(e) NULL)
# Store the first valid floret in 'first_floret'
if (is.null(first_floret()) && !is.null(floret3)) {
first_floret(floret3)
}
# Store the floret3 in the list if it is not NULL
if (!is.null(floret3)) {
florets_list[[id]] <- floret3
floret_colors_list[[id]] <- floret3$nodes$color  # Store all node colors
}
}
# Print each floret and its corresponding nodes and edges
# Check for coloring consistency
if (length(florets_list) > 1) {
# Compare all colors for each floret
all_colors_match <- all(
sapply(floret_colors_list, function(x) identical(x, floret_colors_list[[1]]))
)
if (!all_colors_match) {
showModal(modalDialog(
title = "Inconsistent Floret Colouring",
"The selected polygons have inconsistent floret colouring. Please ensure all selected polygons have the same floret colouring.",
easyClose = TRUE,
footer = modalButton("Close")
))
first_floret(NULL)
all_florets(NULL)
selected_polygon(NULL)
return() }
}
# Combine all florets into a single structure
if (length(florets_list) > 0) {
combined_nodes <- do.call(rbind, lapply(florets_list, function(f) f$nodes))
combined_edges <- do.call(rbind, lapply(florets_list, function(f) f$edges))
# Remove duplicate rows (if any) to ensure clean combined florets
combined_nodes <- combined_nodes[!duplicated(combined_nodes), ]
combined_edges <- combined_edges[!duplicated(combined_edges), ]
# Store combined florets in 'all_florets'
all_florets(list(nodes = combined_nodes, edges = combined_edges))
} else {
all_florets(NULL)  # Set all_florets to NULL if no valid florets were found
}
#print("all_florets")
#print(all_florets)
if (is.null(floret3) || (nrow(floret3$nodes) == 0 && nrow(floret3$edges) == 0)) {
# Show error modal if no floret exists
showModal(modalDialog(
title = "Error",
paste("No floret exists for the selected node(s):", toString(clicked_id)),
easyClose = TRUE,
footer = modalButton("Close")
))
} else {
floret <- first_floret()
#print("floret")
#print(floret)
output$dynamic_vis <- renderVisNetwork({
floret$nodes$title <- NULL
visNetwork(floret$nodes, floret$edges) %>%
visHierarchicalLayout(direction = "LR", levelSeparation = 1000) %>%
visNodes(scaling = list(min = 300, max = 300)) %>%
visEdges(arrows = list(to = list(enabled = TRUE, scaleFactor = 5))) %>%
visOptions(
manipulation = list(enabled = FALSE, addEdgeCols = FALSE, addNodeCols = FALSE, editNodeCols = FALSE)
) %>%
visInteraction(dragNodes = FALSE, multiselect = TRUE, navigationButtons = TRUE) %>%
visPhysics(
solver = "forceAtlas2Based",
forceAtlas2Based = list(gravitationalConstant = -50),
hierarchicalRepulsion = list(nodeDistance = 300)
) %>%
visEvents(
selectNode = "function(params) {
Shiny.onInputChange('dynamic_vis_selectedNodes', params.nodes);
}"
) %>%
visEvents(stabilizationIterationsDone = "function() { this.physics.options.enabled = false; }")
}
)
# Show modal dialog with floret visualization
showModal(modalDialog(
title = paste("Floret(s) starting from:", toString(clicked_id)),
pickerInput("existing_colors", "Choose Existing Color:",
choices = c("", stored_colors$all_colors),
choicesOpt = list(
style = paste0("background:", c("#FFFFFF", stored_colors$all_colors), ";")
)
),
colourpicker::colourInput("modal_nodeColor", "Choose Node Color", value = "#FFFFFF"),
actionButton("colorSelectedModalNodes", "Colour Selected Nodes"),
visNetworkOutput("dynamic_vis"),
easyClose = FALSE,
footer = tagList(
actionButton("close_floret_modal", "Close")  # Custom close button
),
))
#first_floret(NULL)
}
}
})
observeEvent(input$close_floret_modal, {
# Reset variables and close the modal
first_floret(NULL)
all_florets(NULL)
selected_polygon(NULL)
removeModal()
})
stored_colors <- reactiveValues(all_colors = character(0))
observe({
# Ensure graph_data is available before accessing its color
graph_data <- updated_graph_data()
# Check if graph_data$nodes$color exists and has data
if (!is.null(graph_data$nodes) && "color" %in% colnames(graph_data$nodes)) {
# Extract unique colors from graph_data$nodes$color and update stored_colors
stored_colors$all_colors <- unique(graph_data$nodes$color)
}
})
observeEvent(input$colorSelectedModalNodes, {
# Get selected nodes from the visNetwork
selected_nodes <- input$dynamic_vis_selectedNodes
print(paste("Selected nodes:", toString(selected_nodes)))  # Debugging statement
if (!is.null(all_florets())) {
# Get the combined edges and nodes from all_florets()
combined_edges <- all_florets()$edges
combined_nodes <- all_florets()$nodes
print("combined_nodes")
print(combined_edges)
visoutputdata <- updated_graph_data()
full_edges <- visoutputdata$edges
# Function to get the full path from origin to a node (recursive search)
get_path_to_origin_standardized <- function(node, edges) {
path <- c()  # Initialize the path
current_node <- node
while (!is.null(current_node)) {
# Find the incoming edge to the current node
incoming_edge <- subset(edges, to == current_node)
if (nrow(incoming_edge) == 0) break  # No more incoming edges
# Prepend the label to the path
path <- c(incoming_edge$label1, path)
# Move to the 'from' node of the current edge
current_node <- incoming_edge$from
}
# Ensure the root-level label is included in the final output.
# No removal of the root-level label here.
# Return the path as a concatenated string with root label included
return(paste(path, collapse = " -> "))
}
# Get the paths for all nodes
all_paths <- sapply(combined_nodes$id, function(node) {
get_path_to_origin_standardized(node, full_edges)
})
get_nodes_with_same_start <- function(selected_nodes, all_paths, location_labels) {
# Split location_labels if it's a single string with delimiters
if (is.character(location_labels) && length(location_labels) == 1) {
location_labels <- strsplit(location_labels, ",")[[1]]
}
# Remove extra whitespace and ensure consistency
location_labels <- trimws(location_labels)
# Initialize a set to store all matching nodes
all_matching_nodes <- c()
for (selected_node in selected_nodes) {
# Get the path for the current selected node
selected_path <- all_paths[selected_node]
if (is.null(selected_path)) {
stop(paste("Selected node", selected_node, "not found in all_paths."))
}
# Split the selected path into labels
selected_labels <- strsplit(selected_path, " -> ")[[1]]
# Find the first occurrence of any location label in the selected path
prefix_end <- which(tolower(selected_labels) %in% tolower(location_labels))
if (length(prefix_end) == 0) {
stop(paste("Selected path for node", selected_node, "does not contain any of the location labels."))
}
prefix_end <- min(prefix_end)  # Get the earliest matching location
# Determine the prefix to match (up to and including the location label)
prefix <- selected_labels[1:prefix_end]
prefix_length <- length(prefix)
# Find all nodes with the same prefix (up to the location label) and matching length
matching_nodes <- names(all_paths)[sapply(all_paths, function(path) {
path_labels <- strsplit(path, " -> ")[[1]]
# Ensure the path length matches (after excluding location)
if (length(path_labels) != length(selected_labels)) {
return(FALSE)
}
# Ensure prefix matches up to the location label
prefix_match <- all(prefix[-length(prefix)] == path_labels[1:(prefix_length - 1)])
# Ensure the location matches
location_match <- tolower(path_labels[prefix_length]) %in% tolower(location_labels)
# Ensure the rest of the suffix after the location matches exactly, if location is not the suffix
suffix_match <- TRUE
if (!(tolower(path_labels[length(path_labels)]) %in% tolower(location_labels))) {
suffix_match <- length(path_labels) > prefix_length &&
all(path_labels[(prefix_length + 1):length(path_labels)] == selected_labels[(prefix_length + 1):length(selected_labels)])
}
return(prefix_match && location_match && suffix_match)
})]
# Add matching nodes to the set
all_matching_nodes <- unique(c(all_matching_nodes, matching_nodes))
}
return(all_matching_nodes)
}
selected_ids <- selected_polygon()
#print("selected_nodes")
#print(selected_nodes)
#print("all_paths")
#print(all_paths)
print(toString(selected_ids))
# Match nodes with the same path as selected nodes
#matching_nodes <- combined_nodes$id[all_paths %in% sapply(selected_nodes, function(node) get_path_to_origin_standardized(node, full_edges))]
matching_nodes <- get_nodes_with_same_start(selected_nodes, all_paths, toString(selected_ids))
# Combine with the initially selected nodes to ensure complete paths are colored
all_selected_nodes <- unique(c(selected_nodes, matching_nodes))#, matching_nodes))
print("All selected nodes to be colored:")
print(all_selected_nodes)  # Debugging output
selected_color <- if (input$existing_colors != "") {
input$existing_colors  # Use the selected colour from the dropdown
} else {
input$modal_nodeColor  # Use the new colour from the colour picker
}
# Check if nodes are selected
if (!is.null(all_selected_nodes) && length(all_selected_nodes) > 0) {
# Get the floret graph data
data <- first_floret()
data_all <- all_florets()
if (!is.null(data)) {
# Update the node colours for selected nodes
data$nodes$color[data$nodes$id %in% all_selected_nodes] <- selected_color
data_all$nodes$color[data_all$nodes$id %in% all_selected_nodes] <- selected_color
# Update the reactive value for the floret
first_floret(data)
all_florets(data_all)
# Reflect the change in the visNetwork
visNetworkProxy("dynamic_vis") %>%
visUpdateNodes(nodes = data$nodes)
graph_data <- updated_graph_data()
graph_data$nodes$color[graph_data$nodes$id %in% all_selected_nodes] <- selected_color
updated_graph_data(graph_data)
# Extract all unique color values from both the floret and graph_data
all_colors <- unique(c(stored_colors$all_colors, selected_color, graph_data$nodes$color))
print("All available colors:")
print(all_colors)
# Update stored_colors to include all unique colors
stored_colors$all_colors <- all_colors
# Update the dropdown to include the new and existing colors
updateSelectInput(session, "existing_colors", choices = c("", stored_colors$all_colors), selected = "")
} else {
showNotification("No nodes selected to color.", type = "error")
}
# Deselect all nodes in the visNetwork
visNetworkProxy("dynamic_vis") %>%
visUnselectAll()
} else {
showNotification("No florets are available to match edge labels.", type = "error")}
selected_color <- if (input$existing_colors != "") {
input$existing_colors  # Use the selected colour from the dropdown
} else {
input$modal_nodeColor  # Use the new colour from the colour picker
}
# Check if nodes are selected
if (!is.null(selected_nodes) && length(selected_nodes) > 0) {
# Get the floret graph data
data <- first_floret()
data_all <- all_florets()
if (!is.null(data)) {
# Update the node colours for selected nodes
data$nodes$color[data$nodes$id %in% selected_nodes] <- selected_color
data_all$nodes$color[data_all$nodes$id %in% all_selected_nodes] <- selected_color
# Update the reactive value for the floret
first_floret(data)
all_florets(data_all)
# Reflect the change in the visNetwork
visNetworkProxy("dynamic_vis") %>%
visUpdateNodes(nodes = data$nodes)
graph_data <- updated_graph_data()
graph_data$nodes$color[graph_data$nodes$id %in% all_selected_nodes] <- selected_color
updated_graph_data(graph_data)
# Extract all unique color values from both the floret and graph_data
all_colors <- unique(c(stored_colors$all_colors, selected_color, graph_data$nodes$color))
#print(all_colors)
#print("all_colors")
# Update stored_colors to include all unique colors
stored_colors$all_colors <- all_colors
# Update the dropdown to include the new and existing colors
updateSelectInput(session, "existing_colors", choices = c("",stored_colors$all_colors), selected = "")
} else {
showNotification("No nodes selected to color.", type = "error")
}
visNetworkProxy("dynamic_vis") %>%
visUnselectAll()
}}})
observe({
if (input$viewcegmap == "Chain Event Graph and Map") {
# Show the map and adjust event tree layout
shinyjs::show("ceg_map")
shinyjs::runjs('
$("#ceg_map").css({
"display": "inline-block",
"width": "100%",
"height": "600px"
});
$("#ceg_network").css({
"width": "100%",
"height": "600px",
"float": "right"
});
');
# Trigger a resize event for Leaflet to fix hidden map rendering
shinyjs::runjs('setTimeout(function() { window.dispatchEvent(new Event("resize")); }, 100);')
} else {
# Hide the map and adjust event tree layout to full width
shinyjs::hide("ceg_map")
shinyjs::runjs('
$("#ceg_network").css({
"width": "200%",
"height": "1000px",
"float": "none"
});
')
}
})
observeEvent(input$ceg_map_shape_click, {
# Access the ID of the clicked polygon
clicked_id <- input$ceg_map_shape_click$id
if (!is.null(clicked_id)) {
# Get the relevant node based on the clicked ID
shape_data <- shapefileData()  # Ensure you're working with the reactive data
visoutputdata <- contracted_data()
clicked_data <- shape_data[shape_data[[1]] == clicked_id, ]
start_label1 <- clicked_data[[1, 1]]  # Or derive it from the clicked data
# Try to extract the floret
floret <- tryCatch({
extract_floret(visoutputdata$nodes, visoutputdata$edges, start_label1)
}, error = function(e) NULL)
# Check if the floret exists
if (is.null(floret) || (nrow(floret$nodes) == 0 && nrow(floret$edges) == 0)) {
# Show a modal dialog with an error message
showModal(modalDialog(
title = "Error",
paste("No floret exists for the selected node:", clicked_id),
easyClose = TRUE,
footer = modalButton("Close")
))
} else {
# Render visNetwork for the floret
output$dynamic_vis2 <- renderVisNetwork({
visNetwork(floret$nodes, floret$edges) %>%
visHierarchicalLayout(direction = "LR", levelSeparation = 1000) %>%
visNodes(scaling = list(min = 900, max = 900)) %>%
visEdges(smooth = TRUE, arrows = list(to = list(enabled = TRUE, scaleFactor = 5))) %>%
visOptions(
manipulation = list(
enabled = FALSE,
addEdgeCols = FALSE,
addNodeCols = FALSE,
editEdgeCols = FALSE,
editNodeCols = c("color"),
multiselect = TRUE
),
nodesIdSelection = FALSE
) %>%
visInteraction(
dragNodes = TRUE,
multiselect = TRUE,
navigationButtons = TRUE
) %>%
visPhysics(hierarchicalRepulsion = list(nodeDistance = 990), stabilization = TRUE) %>%
visEvents(
selectNode = "function(params) { /* Node selection code */ }",
deselectNode = "function(params) { /* Deselect code */ }"
) %>%
visEvents(stabilizationIterationsDone = "function() { this.physics.options.enabled = false; }")
})
# Display modal dialog with the graph
showModal(modalDialog(
title = paste("Reduced CEG starting from:", clicked_id),
visNetworkOutput("dynamic_vis2"),
easyClose = TRUE,
footer = modalButton("Close")
))
}
}
})
}
shinyApp(ui, server)
}
run_stceg()
library(stCEG)
data <- homicides
event_tree <- create_event_tree(data, columns = c(1,2,4,5), "both")
event_tree
coloured_tree <- ahc_colouring(event_tree)
coloured_tree
library(stCEG)
data <- homicides
event_tree <- create_event_tree(data, columns = c(1,2,4,5), "both")
event_tree
coloured_tree <- ahc_colouring(event_tree)
coloured_tree
tree_priors <- specify_priors(coloured_tree, prior_type = "Uniform")
staged_tree <- staged_tree_prior(coloured_tree, tree_priors)
staged_tree <- staged_tree_prior(coloured_tree, tree_priors)
staged_tree
ceg <- create_ceg(staged_tree, view_table = TRUE)
tree_priors <- specify_priors(coloured_tree, prior_type = "Uniform")
no
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%"
)
install.packages("stCEG")
library(stCEG)
data <- homicides
event_tree <- create_event_tree(data, columns = c(1,2,4,5), "both")
event_tree
coloured_tree <- ahc_colouring(event_tree)
coloured_tree
tree_priors <- specify_priors(coloured_tree, prior_type = "Uniform")
"no"
devtools::document()
rm(list = c("run_stceg"))
devtools::document()
devtools::load_all()
tree_priors <- specify_priors(coloured_tree, prior_type = "Uniform", ask_edit = FALSE)
renv::status()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%"
)
install.packages("stCEG")
remotes::install_github("holliecalley/stCEG")
force = TRUE
library(stCEG)
data <- homicides
event_tree <- create_event_tree(data, columns = c(1,2,4,5), "both")
event_tree
coloured_tree <- ahc_colouring(event_tree)
coloured_tree
tree_priors <- specify_priors(coloured_tree, prior_type = "Uniform", ask_edit = FALSE)
staged_tree <- staged_tree_prior(coloured_tree, tree_priors)
staged_tree
ceg <- create_ceg(staged_tree, view_table = TRUE)
ceg <- create_ceg(staged_tree, view_table = FALSE)
ceg <- create_ceg(staged_tree, view_table = FALSE)
ceg
ceg <- create_ceg(staged_tree, view_table = FALSE)
ceg
ceg <- create_ceg(staged_tree, view_table = FALSE)
ceg
devtools::load_all()
renv::restore()
# Load your package
devtools::load_all()
# Confirm that the function now accepts ask_edit
formals(specify_priors)
devtools::install()
.rs.restartR()
data <- homicides
event_tree <- create_event_tree(data, columns = c(1,2,4,5), "both")
event_tree
coloured_tree <- ahc_colouring(event_tree)
coloured_tree
devtools::load_all()
devtools::document()
devtools::load_all()
