print(all_paths)
print(toString(selected_ids))
# Match nodes with the same path as selected nodes
#matching_nodes <- combined_nodes$id[all_paths %in% sapply(selected_nodes, function(node) get_path_to_origin_standardized(node, full_edges))]
matching_nodes <- get_nodes_with_same_start(selected_nodes, all_paths, toString(selected_ids))
# Combine with the initially selected nodes to ensure complete paths are colored
all_selected_nodes <- unique(c(selected_nodes, matching_nodes))#, matching_nodes))
print("All selected nodes to be colored:")
print(all_selected_nodes)  # Debugging output
selected_color <- if (input$existing_colors != "") {
input$existing_colors  # Use the selected colour from the dropdown
} else {
input$modal_nodeColor  # Use the new colour from the colour picker
}
# Check if nodes are selected
if (!is.null(all_selected_nodes) && length(all_selected_nodes) > 0) {
# Get the floret graph data
data <- first_floret()
data_all <- all_florets()
if (!is.null(data)) {
# Update the node colours for selected nodes
data$nodes$color[data$nodes$id %in% all_selected_nodes] <- selected_color
data_all$nodes$color[data_all$nodes$id %in% all_selected_nodes] <- selected_color
# Update the reactive value for the floret
first_floret(data)
all_florets(data_all)
# Reflect the change in the visNetwork
visNetworkProxy("dynamic_vis") %>%
visUpdateNodes(nodes = data$nodes)
graph_data <- updated_graph_data()
graph_data$nodes$color[graph_data$nodes$id %in% all_selected_nodes] <- selected_color
updated_graph_data(graph_data)
# Extract all unique color values from both the floret and graph_data
all_colors <- unique(c(stored_colors$all_colors, selected_color, graph_data$nodes$color))
print("All available colors:")
print(all_colors)
# Update stored_colors to include all unique colors
stored_colors$all_colors <- all_colors
# Update the dropdown to include the new and existing colors
updateSelectInput(session, "existing_colors", choices = c("", stored_colors$all_colors), selected = "")
} else {
showNotification("No nodes selected to color.", type = "error")
}
# Deselect all nodes in the visNetwork
visNetworkProxy("dynamic_vis") %>%
visUnselectAll()
} else {
showNotification("No florets are available to match edge labels.", type = "error")}
selected_color <- if (input$existing_colors != "") {
input$existing_colors  # Use the selected colour from the dropdown
} else {
input$modal_nodeColor  # Use the new colour from the colour picker
}
# Check if nodes are selected
if (!is.null(selected_nodes) && length(selected_nodes) > 0) {
# Get the floret graph data
data <- first_floret()
data_all <- all_florets()
if (!is.null(data)) {
# Update the node colours for selected nodes
data$nodes$color[data$nodes$id %in% selected_nodes] <- selected_color
data_all$nodes$color[data_all$nodes$id %in% all_selected_nodes] <- selected_color
# Update the reactive value for the floret
first_floret(data)
all_florets(data_all)
# Reflect the change in the visNetwork
visNetworkProxy("dynamic_vis") %>%
visUpdateNodes(nodes = data$nodes)
graph_data <- updated_graph_data()
graph_data$nodes$color[graph_data$nodes$id %in% all_selected_nodes] <- selected_color
updated_graph_data(graph_data)
# Extract all unique color values from both the floret and graph_data
all_colors <- unique(c(stored_colors$all_colors, selected_color, graph_data$nodes$color))
print(all_colors)
print("all_colors")
# Update stored_colors to include all unique colors
stored_colors$all_colors <- all_colors
# Update the dropdown to include the new and existing colors
updateSelectInput(session, "existing_colors", choices = c("",stored_colors$all_colors), selected = "")
} else {
showNotification("No nodes selected to color.", type = "error")
}
visNetworkProxy("dynamic_vis") %>%
visUnselectAll()
}}})
observe({
if (input$viewcegmap == "Chain Event Graph and Map") {
# Show the map and adjust event tree layout
shinyjs::show("ceg_map")
shinyjs::runjs('
$("#ceg_map").css({
"display": "inline-block",
"width": "100%",
"height": "600px"
});
$("#ceg_network").css({
"width": "100%",
"height": "600px",
"float": "right"
});
');
# Trigger a resize event for Leaflet to fix hidden map rendering
shinyjs::runjs('setTimeout(function() { window.dispatchEvent(new Event("resize")); }, 100);')
} else {
# Hide the map and adjust event tree layout to full width
shinyjs::hide("ceg_map")
shinyjs::runjs('
$("#ceg_network").css({
"width": "200%",
"height": "1000px",
"float": "none"
});
')
}
})
observeEvent(input$ceg_map_shape_click, {
# Access the ID of the clicked polygon
clicked_id <- input$ceg_map_shape_click$id
if (!is.null(clicked_id)) {
# Get the relevant node based on the clicked ID
shape_data <- shapefileData()  # Ensure you're working with the reactive data
visoutputdata <- contracted_data()
clicked_data <- shape_data[shape_data[[1]] == clicked_id, ]
start_label1 <- clicked_data[[1, 1]]  # Or derive it from the clicked data
# Try to extract the floret
floret <- tryCatch({
extract_floret(visoutputdata$nodes, visoutputdata$edges, start_label1)
}, error = function(e) NULL)
# Check if the floret exists
if (is.null(floret) || (nrow(floret$nodes) == 0 && nrow(floret$edges) == 0)) {
# Show a modal dialog with an error message
showModal(modalDialog(
title = "Error",
paste("No floret exists for the selected node:", clicked_id),
easyClose = TRUE,
footer = modalButton("Close")
))
} else {
# Render visNetwork for the floret
output$dynamic_vis2 <- renderVisNetwork({
visNetwork(floret$nodes, floret$edges) %>%
visHierarchicalLayout(direction = "LR", levelSeparation = 1000) %>%
visNodes(scaling = list(min = 900, max = 900)) %>%
visEdges(smooth = TRUE, arrows = list(to = list(enabled = TRUE, scaleFactor = 5))) %>%
visOptions(
manipulation = list(
enabled = FALSE,
addEdgeCols = FALSE,
addNodeCols = FALSE,
editEdgeCols = FALSE,
editNodeCols = c("color"),
multiselect = TRUE
),
nodesIdSelection = FALSE
) %>%
visInteraction(
dragNodes = TRUE,
multiselect = TRUE,
navigationButtons = TRUE
) %>%
visPhysics(hierarchicalRepulsion = list(nodeDistance = 990), stabilization = TRUE) %>%
visEvents(
selectNode = "function(params) { /* Node selection code */ }",
deselectNode = "function(params) { /* Deselect code */ }"
) %>%
visEvents(stabilizationIterationsDone = "function() { this.physics.options.enabled = false; }")
})
# Display modal dialog with the graph
showModal(modalDialog(
title = paste("Reduced CEG starting from:", clicked_id),
visNetworkOutput("dynamic_vis2"),
easyClose = TRUE,
footer = modalButton("Close")
))
}
}
})
}
shinyApp(ui, server)
}
run_stceg()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
data <- data.frame(Area = sample(c("Enfield", "Lewisham"), 100, replace = TRUE),
DomesticAbuse = sample(c("Yes", "No"), 100, replace = TRUE),
Sex = sample(c("Male", "Female"), 100, replace = TRUE),
Solved = sample(c("Solved", "Unsolved"), 100, replace = TRUE))
event_tree <- create_event_tree(data, c(2,3,4), "both")
coloured_tree <- ahc_colouring(event_tree)
tree_priors <- specify_priors(coloured_tree, prior_type = "Uniform")
ceg <- create_ceg(staged_tree, tree_priors, view_table = TRUE)
data <- data.frame(Area = sample(c("Enfield", "Lewisham"), 100, replace = TRUE),
DomesticAbuse = sample(c("Yes", "No"), 100, replace = TRUE),
Sex = sample(c("Male", "Female"), 100, replace = TRUE),
Solved = sample(c("Solved", "Unsolved"), 100, replace = TRUE))
event_tree <- create_event_tree(data, c(2,3,4), "both")
coloured_tree <- ahc_colouring(event_tree)
tree_priors <- specify_priors(coloured_tree, prior_type = "Uniform")
staged_tree <- staged_tree_prior(coloured_tree, tree_priors)
ceg <- create_ceg(staged_tree, tree_priors, view_table = TRUE)
ceg
staged_tree
ceg
create_ceg(staged_tree, tree_priors, view_table = TRUE)
ceg$ceg
event_tree
staged_tree
ceg
library(stCEG)
homicides <- read_csv("stCEG/homicides.csv")
homicides <- read_csv("Documents/GitHub/stCEG Github/homicides.csv")
setwd("~/")
homicides <- read_csv("stCEG/homicides.csv")
setwd("~/stCEG")
homicides <- read_csv("stCEG/homicides.csv")
setwd("~/")
homicides <- read_csv("stCEG/data-raw/homicides.csv")
homicides <- homicides[c(9,3,2,4,5)]
homicides <- homicides %>%
filter(Method_of_Killing != "Not Known/Not Recorded") %>%
filter(Method_of_Killing != "Other Methods of Killing")
homicides$Method_of_Killing <- gsub("Knife or Sharp Implement", "Knife or\nSharp Implement", homicides$Method_of_Killing)
homicides$Method_of_Killing <- gsub("Physical Assault, no weapon", "Physical Assault,\nno weapon", homicides$Method_of_Killing)
homicides$Domestic_Abuse <- gsub("Domestic Abuse", "Domestic\nAbuse", homicides$Domestic_Abuse)
homicides$Domestic_Abuse <- gsub("Not Domestic Abuse", " Not Domestic\nAbuse", homicides$Domestic_Abuse)
head(homicides)
homicides_ET <- create_event_tree(dataset = homicides, level_separation = 1300, node_distance = 300, label_type = "both")
homicides_ET
homicides_FemDA <- delete_nodes(homicides_ET,level_separation = 1300, node_distance = 300, c("s15", "s16", "s19", "s20", "s23", "s24", "s27", "s28"))
homicides_FemDA
homicides_AHC <- ahc_colouring(homicides_ET, level_separation = 1300, node_distance = 300)
homicides_ET
homicides_FemDA
library(stCEG)
warnings()
homicides <- read_csv("stCEG/data-raw/homicides.csv")
library(readr)
homicides <- read_csv("stCEG/data-raw/homicides.csv")
homicides <- read_csv("data-raw/homicides.csv")
homicides_ET <- create_event_tree(dataset = homicides, level_separation = 1300, node_distance = 300, label_type = "both")
homicides <- homicides[c(9,3,2,4,5)]
homicides <- homicides %>%
filter(Method_of_Killing != "Not Known/Not Recorded") %>%
filter(Method_of_Killing != "Other Methods of Killing")
library(dplyr)
homicides <- homicides[c(9,3,2,4,5)]
homicides_ET <- create_event_tree(dataset = homicides, level_separation = 1300, node_distance = 300, label_type = "both")
homicides_ET
homicides_ET$eventtree
homicides_FemDA <- delete_nodes(homicides_ET,level_separation = 1300, node_distance = 300, c("s15", "s16", "s19", "s20", "s23", "s24", "s27", "s28"))
homicides_FemDA
homicides_AHC <- ahc_colouring(homicides_ET, level_separation = 1300, node_distance = 300)
homicides_AHC
homicides_ET <- create_event_tree(dataset = homicides, columns = c(2:4), level_separation = 1300, node_distance = 300, label_type = "both")
homicides_ET
homicides_AHC <- ahc_colouring(homicides_ET, level_separation = 1300, node_distance = 300)
homicides_AHC
homicides_AHC <- update_node_colours(homicides_AHC, node_groups = list(c("s6", "s8", "s10", "s12")), colours = c("#92dce5") , level_separation = 1300, node_distance = 300)
priors2 <- specify_priors(homicides_AHC, "Uniform")
homicides_ST_AHC <- staged_tree_prior(homicides_AHC, priors2, level_separation = 1300, node_distance = 300)
homicides_ST_AHC
homicides_CEG_AHC <- create_ceg(homicides_ST_AHC, view_table = TRUE, label = "posterior_mean", level_separation = 1500)
library(stCEG)
detach("package:stCEG", unload = TRUE)
library(stCEG)
warnings()
usethis::use_gpl3_license("Hollie Calley")
usethis::use_gpl3_license()
devtools::document()
devtools::install()
warnings()
devtools::document()
devtools::install()
warnings()
devtools::check()
devtools::document()
devtools::install()
devtools::check()
devtools::check()
devtools::document()
devtools::install()
devtools::check()
devtools::run_examples(run = TRUE)
devtools::run_examples(run = TRUE)
data <- data.frame(
Area = sample(c("Enfield", "Lewisham"), 100, replace = TRUE),
DomesticAbuse = sample(c("Yes", "No"), 100, replace = TRUE),
Sex = sample(c("Male", "Female"), 100, replace = TRUE),
Solved = sample(c("Solved", "Unsolved"), 100, replace = TRUE)
)
event_tree <- create_event_tree(data, columns = c(1:4), "both")
devtools::document()
devtools::run_examples(run = TRUE)
devtools::document()
devtools::run_examples(run = TRUE)
coloured_tree <- ahc_colouring(event_tree)
data <- data.frame(
Area = sample(c("Enfield", "Lewisham"), 100, replace = TRUE),
DomesticAbuse = sample(c("Yes", "No"), 100, replace = TRUE),
Sex = sample(c("Male", "Female"), 100, replace = TRUE),
Solved = sample(c("Solved", "Unsolved"), 100, replace = TRUE)
)
coloured_tree <- ahc_colouring(event_tree)
devtools::document()
devtools::run_examples(run = TRUE)
devtools::check()
devtools::document()
devtools::check()
run_stceg()
devtools::document()
run_stceg()
library(packageUsage)
install.packages("packageUsage")
install.packages("codetools")
install.packages("codetools")
codetools::checkUsagePackage()
codetools::checkUsagePackage("stCEG")
renv::dependencies("stCEG")
renv::dependencies()
renv::dependencies()
renv::status()
renv::init()
renv::dependencies()
renv::status()
devtools::check()
devtools::document()
devtools::check()
run_stceg()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
Sys.time()
Sys.timezone()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
rcmdcheck::rcmdcheck()
pdflatex --version
rcmdcheck::rcmdcheck()
rcmdcheck::rcmdcheck()
devtools::document()
devtools::document()
rcmdcheck::rcmdcheck()
getNamespaceExports("igraph")  # see if as_data_frame is exported there
getNamespaceExports("dplyr")
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
??randomcoloR
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
warnings()
devtools::check()
devtools::document()
warnings()
devtools::check()
devtools::document()
devtools::document()
warnings()
devtools::document()
warnings()
devtools::document()
warnings()
devtools::document()
devtools::document()
warnings()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
library(stcEG)
library(stCEG)
library(stCEG)
library("stCEG")
devtools::document()
homicides <- read_csv("data-raw/homicides.csv")
library(readr)
homicides <- read_csv("data-raw/homicides.csv")
homicides <- read_csv("data-raw/homicides.csv")
head(homicides)
homicides_ET <- create_event_tree(dataset = homicides, columns = c(2:4), level_separation = 1300, node_distance = 300, label_type = "both")
homicides_ET
homicides_FemDA <- delete_nodes(homicides_ET,level_separation = 1300, node_distance = 300, c("s15", "s16", "s19", "s20", "s23", "s24", "s27", "s28"))
homicides_FemDA
homicides_AHC <- ahc_colouring(homicides_ET, level_separation = 1300, node_distance = 300)
homicides_AHC
homicides_AHC <- update_node_colours(homicides_AHC, node_groups = list(c("s6", "s8", "s10", "s12")), colours = c("#92dce5") , level_separation = 1300, node_distance = 300)
homicides_AHC
group_judgements <- list(c("s13", "s21"), c("s5", "s9"), c("s17"), c("s25"), c("s6", "s8", "s10"), c("s12"), c("s2"), c("s4"))
colour_palette <- c("#92dce5","#C5D86D", "#f2dc5d", "#388697", "#fe5f55", "#ffaa00", "#A9E5BB", "#E79C9C")
homicides_ET_Colour <- update_node_colours(homicides_ET, node_groups = group_judgements, colours = colour_palette , level_separation = 1300, node_distance = 300)
priors2 <- specify_priors(homicides_AHC, "Uniform")
homicides_ST_AHC <- staged_tree_prior(homicides_AHC, priors2, level_separation = 1300, node_distance = 300)
homicides_ST_AHC
homicides_CEG_AHC <- create_ceg(homicides_ST_AHC, view_table = TRUE, label = "posterior_mean", level_separation = 1500)
rlang::last_trace()
devtools::document()
homicides_CEG_AHC <- create_ceg(homicides_ST_AHC, view_table = TRUE, label = "posterior_mean", level_separation = 1500)
run_stceg()
library(stCEG)
devtools::check()
devtools::check()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
library(stCEG)
homicides <- read_csv("data-raw/homicides.csv")
head(homicides)
homicides_ET <- create_event_tree(dataset = homicides, columns = c(2:4), level_separation = 1300, node_distance = 300, label_type = "both")
homicides_ET
homicides_FemDA <- delete_nodes(homicides_ET,level_separation = 1300, node_distance = 300, c("s15", "s16", "s19", "s20", "s23", "s24", "s27", "s28"))
homicides_FemDA
homicides_AHC <- ahc_colouring(homicides_ET, level_separation = 1300, node_distance = 300)
homicides_AHC
homicides_AHC <- update_node_colours(homicides_AHC, node_groups = list(c("s6", "s8", "s10", "s12")), colours = c("#92dce5") , level_separation = 1300, node_distance = 300)
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::check()
homicides <- read_csv("data-raw/homicides.csv")
head(homicides)
homicides_ET <- create_event_tree(dataset = homicides, columns = c(2:4), level_separation = 1300, node_distance = 300, label_type = "both")
homicides_ET
homicides_FemDA <- delete_nodes(homicides_ET,level_separation = 1300, node_distance = 300, c("s15", "s16", "s19", "s20", "s23", "s24", "s27", "s28"))
homicides_FemDA
homicides_AHC <- ahc_colouring(homicides_ET, level_separation = 1300, node_distance = 300)
homicides_AHC
homicides_AHC <- update_node_colours(homicides_AHC, node_groups = list(c("s6", "s8", "s10", "s12")), colours = c("#92dce5") , level_separation = 1300, node_distance = 300)
homicides_AHC
priors2 <- specify_priors(homicides_AHC, "Uniform")
homicides_ST_AHC <- staged_tree_prior(homicides_AHC, priors2, level_separation = 1300, node_distance = 300)
homicides_ST_AHC
homicides_CEG_AHC <- create_ceg(homicides_ST_AHC, view_table = TRUE, label = "posterior_mean", level_separation = 1500)
run_stceg()
devtools::document()
homicides_FemDA <- delete_nodes(homicides_ET,level_separation = 1300, node_distance = 300, c("s15", "s16", "s19", "s20", "s23", "s24", "s27", "s28"))
devtools::document()
devtools::check()
homicides <- read_csv("data-raw/homicides.csv")
head(homicides)
homicides_ET <- create_event_tree(dataset = homicides, columns = c(2:4), level_separation = 1300, node_distance = 300, label_type = "both")
homicides_ET
homicides_FemDA <- delete_nodes(homicides_ET,level_separation = 1300, node_distance = 300, c("s15", "s16", "s19", "s20", "s23", "s24", "s27", "s28"))
homicides_FemDA
homicides_AHC <- ahc_colouring(homicides_ET, level_separation = 1300, node_distance = 300)
homicides_AHC
priors2 <- specify_priors(homicides_AHC, "Uniform")
homicides_ST_AHC <- staged_tree_prior(homicides_AHC, priors2, level_separation = 1300, node_distance = 300)
homicides_ST_AHC
homicides_CEG_AHC <- create_ceg(homicides_ST_AHC, view_table = TRUE, label = "posterior_mean", level_separation = 1500)
homicides_Delete <- delete_nodes(homicides_ET, c("s9", "s21", "s22"))
homicides_Delete
homicides_CEG_AHC <- create_ceg(homicides_ST_AHC, view_table = TRUE, label = "posterior_mean", level_separation = 1500)
run_stceg()
devtools::document()
devtools::check()
# Filter for nodes that are not at the max level
non_max_level_nodes <- nodes[nodes$level != max_level, ]
run_stceg()
devtools::document()
run_stceg()
devtools::document()
devtools::check()
run_stceg()
