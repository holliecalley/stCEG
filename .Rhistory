}
print(nodes)
runApp('Documents/GitHub/hollieceg/app copy.R')
runApp('Documents/GitHub/hollieceg/app copy.R')
mergedlist <-c()
for (i in 1:sum(numb)){
mergedlist<-c(mergedlist,list(labelling[i,]))
}
mergedlist
mergedlist <- list()
for (i in 1:length(nodes_to_consider$id)) {
mergedlist[[i]] <- nodes_to_consider$id[i]
}
mergedlist
runApp('Documents/GitHub/hollieceg/app copy.R')
row_numbers <- nodes_to_consider$id
row_numbers <- nodes_to_consider$id
print(flattened_list)
included_ids <- unlist(flattened_list)
# Identify missing IDs
missing_ids <- setdiff(row_numbers, included_ids)
# Add each missing ID as an individual sublist to mergedlist
for (missing_id in missing_ids) {
mergedlist <- append(mergedlist, list(missing_id))
}
# Print the updated mergedlist
print(mergedlist)
print(nodes)
runApp('Documents/GitHub/hollieceg/app copy.R')
runApp('Documents/GitHub/hollieceg/app copy.R')
runApp('Documents/GitHub/hollieceg/app copy.R')
flattened_list <- lapply(row_numbers_list, function(x) unlist(x))
included_ids <- unlist(flattened_list)
included_ids
missing_ids <- setdiff(row_numbers, included_ids)
missing_ids
flattened_list
exampledata<-homicide_data2
data2 <- graph_data
nodes <- data2$nodes
levels <- nodes$level
# Filter out nodes at level 1 or max level
nodes_to_consider <- nodes[!(levels %in% c(5)), ]
nodes_to_consider$id2 <- 1:nrow(nodes_to_consider)
nodes_to_consider
edges <- data2$edges
edges_to_consider <- edges %>%
group_by(from) %>%
summarize(
label2_list = paste(label2, collapse = ", ")
)
edges_to_consider
nodes_to_consider <- inner_join(nodes_to_consider, edges_to_consider, by = join_by(id == from))
convert_to_matrix <- function(label2_list_str) {
# Split the string into a numeric vector
num_vec <- as.numeric(unlist(strsplit(label2_list_str, ", ")))
# Convert the numeric vector to a matrix with 1 row
mat <- matrix(num_vec, nrow = 1, byrow = TRUE)
# If we have more than one element, return the matrix as-is.
# If there's only one element, wrap it into a matrix format
if (length(num_vec) == 2) {
return(mat)
} else {
return(matrix(num_vec, nrow = 1))
}
}
# Apply the conversion function to the 'label2_list' column
numbvariables<-ncol(exampledata)
numbvariables
numbcat<-c()
for(k in 1:numbvariables){
numbcat<-c(numbcat,nlevels(exampledata[,k]))
}
numbcat
equivsize<-max(numbcat)
equivsize
numb<-c(1)
for(i in 2:numbvariables){
numb<-c(numb,prod(numbcat[1:(i-1)]))
}
numb
prior<-c()
for(i in 1:numbvariables){
for(j in 1:numb[i]){
prior<-c(prior,list(rbind(rep(equivsize/(numbcat[i]*numb[i]),numbcat[i]))))
}
}
prior
#Datalist1: list of the number of individuals going from the stage along a particular edge in C_{0}
data <- lapply(nodes_to_consider$label2_list, convert_to_matrix)
# Print the resulting list of matrices
print(data)
#List of the stages that can be merged in the first step
comparisonset <- nodes_to_consider %>%
group_by(level) %>%
summarise(node_ids = list(id2)) %>%
pull(node_ids)  # Extract the list of node IDs
# Print the resulting list of vectors
print(comparisonset)
labelling <-c()
for (k in 1:(numbvariables - 1)) {
# Alphabetically sort the levels of the current variable
sorted_levels <- sort(levels(factor(exampledata[, k])))
# Create the initial label with "NA" and appropriate repetitions
label <- c("NA", rep("NA", sum(numb[1:k]) - 1))
label <- c(label, rep(sorted_levels, numb[k]))
# If not the last variable, continue adding labels for subsequent variables
if (k < (numbvariables - 1)) {
for (i in (k + 1):(numbvariables - 1)) {
label <- c(label, rep(sorted_levels, each = numb[i + 1] / numb[k + 1], numb[k + 1] / numbcat[k]))
}
}
# Combine the current label with the overall labeling matrix
labelling <- cbind(labelling, label)
}
row_numbers <- nodes_to_consider$id
# Combine the sequence with the `labelling` matrix
# Use `matrix` to ensure the row numbers are a column vector with correct dimensions
labelling <- cbind(labelling, row_numbers)
mergedlist <-c()
for (i in 1:sum(numb)){
mergedlist<-c(mergedlist,list(labelling[i,]))
}
merged1<-c()
lik <-0
for( i in 1: sum(numb)){
alpha<-unlist(prior[i])
print(alpha)
N<-unlist(data[i])
print(N)
lik<-lik+sum(lgamma(alpha+N)-lgamma(alpha))+sum(lgamma(sum(alpha))-lgamma(sum(alpha+N)))
}
score<-c(lik)
#At each step we calculate the difference between the current CEG and the CEG in which two stages in the current comparison set have been merged.
#We go through every possible combination of stages that can be merged. k is an index for the comparisonset we are in,
#and i and j the position of the stages within the comparison set.
diff.end<-1 #to start the algorithm
while(diff.end>0){ #We stop when no positive difference is obtained by merging two stages
#while(length(unlist(comparisonset))>3){
difference <-0
for (k in 1:length(comparisonset)){
if(length(comparisonset[[k]])>1){ #can only merge if more than one stage in the comparisonset
for (i in 1:(length(comparisonset[[k]])-1)){
for (j in (i+1):length(comparisonset[[k]])){
#to compare
compare1<-comparisonset[[k]][i]
compare2<-comparisonset[[k]][j]
#we calculate the difference between
#the CEG where two stages are merged
result<-lgamma(sum(prior[[compare1]]+prior[[compare2]]))-lgamma(sum(prior[[ compare1]]+data[[compare1]]+prior[[compare2]]+data[[compare2]]))+
sum(lgamma(prior[[compare1]]+data[[compare1]]+prior[[compare2]]+data[[ compare2]]))-sum(lgamma(prior[[compare1]]+prior[[compare2]]))-
#and the CEG where the two stages are not merged
(lgamma(sum(prior[[compare1]]))-lgamma(sum(prior[[compare1]]+data[[compare1 ]]))+sum(lgamma(prior[[compare1]]+data[[compare1]]))-
sum(lgamma(prior[[compare1]]))+lgamma(sum(prior[[compare2]]))-lgamma(sum( prior[[compare2]]+data[[compare2]]))+
sum(lgamma(prior[[compare2]]+data[[compare2]]))-sum(lgamma(prior[[compare2]])))
#if the resulting difference is greater than the current difference then we replace it
if (result > difference){
difference<-result
merged<-c(compare1,compare2,k)
}
}
}
}
}
diff.end<-difference
#We update our priorlist, datalist and comparisonset to obtain the priorlist , datalist and comparisonlist for C_{1}
if(diff.end >0){
prior[[merged[1]]]<-prior[[merged[1]]]+prior[[merged[2]]]
prior[[merged[2]]]<-cbind(NA,NA)
data[[merged[1]]]<-data[[merged[1]]]+data[[merged[2]]]
data[[merged[2]]]<-cbind(NA,NA)
comparisonset[[merged[3]]]<-comparisonset[[merged[3]]][-(which(comparisonset[[merged[3]]]==merged[2]))]
mergedlist[[merged[1]]]<-cbind(mergedlist[[merged[1]]],mergedlist[[merged[2]]])
mergedlist[[merged[2]]]<-cbind(NA,NA)
lik<-lik+diff.end
score<-c(score,lik)
merged1<-cbind(merged1,merged)
}
}
#Output: stages of the finest partition to be combined to obtain the most probable CEG structure
stages<-c(1)
for (i in 2:numbvariables){
stages<-c(stages,comparisonset[[i-1]])
}
result<-mergedlist[stages]
newlist<-list(prior=prior,data=data,stages=stages,result=result,score=score,merged=merged1 ,comparisonset=comparisonset ,mergedlist=mergedlist ,lik=lik)
mergedlist
row_numbers_list <- list()
# Loop through each sublist in mergedlist
for (i in 1:length(mergedlist)) {
sublist <- mergedlist[[i]]
# Initialize an empty vector to hold the row_numbers from this sublist
sublist_row_numbers <- c()
# Check if the sublist is not empty and not NULL
if (!is.null(sublist) && length(sublist) > 0) {
# Check if sublist is a matrix and contains "row_numbers"
if (is.matrix(sublist)) {
# Extract "row_numbers" from the matrix
if (any(grepl("^row_numbers$", rownames(sublist)))) {
row_numbers <- sublist[grepl("^s\\d+$", sublist)]
if (length(row_numbers) > 0) {
sublist_row_numbers <- c(sublist_row_numbers, row_numbers)
}
}
} else if (is.list(sublist)) {
# If sublist is a list, check each element for "row_numbers"
for (j in 1:length(sublist)) {
# Ensure the sublist element is not NULL
if (!is.null(sublist[[j]])) {
# Check for named "row_numbers" entry or row_numbers in matrix rownames
if (names(sublist)[j] == "row_numbers" || (is.matrix(sublist[[j]]) && any(grepl("^row_numbers$", rownames(sublist[[j]]))))) {
row_numbers <- sublist[[j]][grepl("^s\\d+$", sublist[[j]])]
if (length(row_numbers) > 0) {
sublist_row_numbers <- c(sublist_row_numbers, row_numbers)
}
}
}
}
}
}
# Add the extracted row_numbers to the main list if any were found
if (length(sublist_row_numbers) > 0) {
row_numbers_list[[length(row_numbers_list) + 1]] <- sublist_row_numbers
}
}
# Flatten the nested lists into simple vectors and print them
flattened_list <- lapply(row_numbers_list, function(x) unlist(x))
print(flattened_list)
num_colors <- length(flattened_list) # Number of groups
colors <- distinctColorPalette(num_colors)
# Step 2: Update the nodes dataframe with these colors
for (i in 1:num_colors) {
group <- flattened_list[[i]]
color <- colors[i]
# Update the color for each node in the group
nodes[nodes$id %in% group, "color.background"] <- color
}
print(nodes)
View(homicide_data2)
runApp('Documents/GitHub/hollieceg/app copy.R')
exampledata<-homicide_data2
data2 <- graph_data
nodes <- data2$nodes
levels <- nodes$level
# Filter out nodes at level 1 or max level
nodes_to_consider <- nodes[!(levels %in% c(5)), ]
nodes_to_consider$id2 <- 1:nrow(nodes_to_consider)
nodes_to_consider
edges <- data2$edges
edges_to_consider <- edges %>%
group_by(from) %>%
summarize(
label2_list = paste(label2, collapse = ", ")
)
edges_to_consider
nodes_to_consider <- inner_join(nodes_to_consider, edges_to_consider, by = join_by(id == from))
convert_to_matrix <- function(label2_list_str) {
# Split the string into a numeric vector
num_vec <- as.numeric(unlist(strsplit(label2_list_str, ", ")))
# Convert the numeric vector to a matrix with 1 row
mat <- matrix(num_vec, nrow = 1, byrow = TRUE)
# If we have more than one element, return the matrix as-is.
# If there's only one element, wrap it into a matrix format
if (length(num_vec) == 2) {
return(mat)
} else {
return(matrix(num_vec, nrow = 1))
}
}
# Apply the conversion function to the 'label2_list' column
numbvariables<-ncol(exampledata)
numbvariables
numbcat<-c()
for(k in 1:numbvariables){
numbcat<-c(numbcat,nlevels(exampledata[,k]))
}
numbcat
equivsize<-max(numbcat)
equivsize
numb<-c(1)
for(i in 2:numbvariables){
numb<-c(numb,prod(numbcat[1:(i-1)]))
}
numb
prior<-c()
for(i in 1:numbvariables){
for(j in 1:numb[i]){
prior<-c(prior,list(rbind(rep(equivsize/(numbcat[i]*numb[i]),numbcat[i]))))
}
}
prior
#Datalist1: list of the number of individuals going from the stage along a particular edge in C_{0}
data <- lapply(nodes_to_consider$label2_list, convert_to_matrix)
# Print the resulting list of matrices
print(data)
#List of the stages that can be merged in the first step
comparisonset <- nodes_to_consider %>%
group_by(level) %>%
summarise(node_ids = list(id2)) %>%
pull(node_ids)  # Extract the list of node IDs
# Print the resulting list of vectors
print(comparisonset)
labelling <-c()
for (k in 1:(numbvariables - 1)) {
# Alphabetically sort the levels of the current variable
sorted_levels <- sort(levels(factor(exampledata[, k])))
# Create the initial label with "NA" and appropriate repetitions
label <- c("NA", rep("NA", sum(numb[1:k]) - 1))
label <- c(label, rep(sorted_levels, numb[k]))
# If not the last variable, continue adding labels for subsequent variables
if (k < (numbvariables - 1)) {
for (i in (k + 1):(numbvariables - 1)) {
label <- c(label, rep(sorted_levels, each = numb[i + 1] / numb[k + 1], numb[k + 1] / numbcat[k]))
}
}
# Combine the current label with the overall labeling matrix
labelling <- cbind(labelling, label)
}
row_numbers <- nodes_to_consider$id
# Combine the sequence with the `labelling` matrix
# Use `matrix` to ensure the row numbers are a column vector with correct dimensions
labelling <- cbind(labelling, row_numbers)
mergedlist <-c()
for (i in 1:sum(numb)){
mergedlist<-c(mergedlist,list(labelling[i,]))
}
merged1<-c()
lik <-0
for( i in 1: sum(numb)){
alpha<-unlist(prior[i])
print(alpha)
N<-unlist(data[i])
print(N)
lik<-lik+sum(lgamma(alpha+N)-lgamma(alpha))+sum(lgamma(sum(alpha))-lgamma(sum(alpha+N)))
}
score<-c(lik)
#At each step we calculate the difference between the current CEG and the CEG in which two stages in the current comparison set have been merged.
#We go through every possible combination of stages that can be merged. k is an index for the comparisonset we are in,
#and i and j the position of the stages within the comparison set.
diff.end<-1 #to start the algorithm
while(diff.end>0){ #We stop when no positive difference is obtained by merging two stages
#while(length(unlist(comparisonset))>3){
difference <-0
for (k in 1:length(comparisonset)){
if(length(comparisonset[[k]])>1){ #can only merge if more than one stage in the comparisonset
for (i in 1:(length(comparisonset[[k]])-1)){
for (j in (i+1):length(comparisonset[[k]])){
#to compare
compare1<-comparisonset[[k]][i]
compare2<-comparisonset[[k]][j]
#we calculate the difference between
#the CEG where two stages are merged
result<-lgamma(sum(prior[[compare1]]+prior[[compare2]]))-lgamma(sum(prior[[ compare1]]+data[[compare1]]+prior[[compare2]]+data[[compare2]]))+
sum(lgamma(prior[[compare1]]+data[[compare1]]+prior[[compare2]]+data[[ compare2]]))-sum(lgamma(prior[[compare1]]+prior[[compare2]]))-
#and the CEG where the two stages are not merged
(lgamma(sum(prior[[compare1]]))-lgamma(sum(prior[[compare1]]+data[[compare1 ]]))+sum(lgamma(prior[[compare1]]+data[[compare1]]))-
sum(lgamma(prior[[compare1]]))+lgamma(sum(prior[[compare2]]))-lgamma(sum( prior[[compare2]]+data[[compare2]]))+
sum(lgamma(prior[[compare2]]+data[[compare2]]))-sum(lgamma(prior[[compare2]])))
#if the resulting difference is greater than the current difference then we replace it
if (result > difference){
difference<-result
merged<-c(compare1,compare2,k)
}
}
}
}
}
diff.end<-difference
#We update our priorlist, datalist and comparisonset to obtain the priorlist , datalist and comparisonlist for C_{1}
if(diff.end >0){
prior[[merged[1]]]<-prior[[merged[1]]]+prior[[merged[2]]]
prior[[merged[2]]]<-cbind(NA,NA)
data[[merged[1]]]<-data[[merged[1]]]+data[[merged[2]]]
data[[merged[2]]]<-cbind(NA,NA)
comparisonset[[merged[3]]]<-comparisonset[[merged[3]]][-(which(comparisonset[[merged[3]]]==merged[2]))]
mergedlist[[merged[1]]]<-cbind(mergedlist[[merged[1]]],mergedlist[[merged[2]]])
mergedlist[[merged[2]]]<-cbind(NA,NA)
lik<-lik+diff.end
score<-c(score,lik)
merged1<-cbind(merged1,merged)
}
}
#Output: stages of the finest partition to be combined to obtain the most probable CEG structure
stages<-c(1)
for (i in 2:numbvariables){
stages<-c(stages,comparisonset[[i-1]])
}
result<-mergedlist[stages]
newlist<-list(prior=prior,data=data,stages=stages,result=result,score=score,merged=merged1 ,comparisonset=comparisonset ,mergedlist=mergedlist ,lik=lik)
mergedlist
row_numbers_list <- list()
# Loop through each sublist in mergedlist
for (i in 1:length(mergedlist)) {
sublist <- mergedlist[[i]]
# Initialize an empty vector to hold the row_numbers from this sublist
sublist_row_numbers <- c()
# Check if the sublist is not empty and not NULL
if (!is.null(sublist) && length(sublist) > 0) {
# Check if sublist is a matrix and contains "row_numbers"
if (is.matrix(sublist)) {
# Extract "row_numbers" from the matrix
if (any(grepl("^row_numbers$", rownames(sublist)))) {
row_numbers <- sublist[grepl("^s\\d+$", sublist)]
if (length(row_numbers) > 0) {
sublist_row_numbers <- c(sublist_row_numbers, row_numbers)
}
}
} else if (is.list(sublist)) {
# If sublist is a list, check each element for "row_numbers"
for (j in 1:length(sublist)) {
# Ensure the sublist element is not NULL
if (!is.null(sublist[[j]])) {
# Check for named "row_numbers" entry or row_numbers in matrix rownames
if (names(sublist)[j] == "row_numbers" || (is.matrix(sublist[[j]]) && any(grepl("^row_numbers$", rownames(sublist[[j]]))))) {
row_numbers <- sublist[[j]][grepl("^s\\d+$", sublist[[j]])]
if (length(row_numbers) > 0) {
sublist_row_numbers <- c(sublist_row_numbers, row_numbers)
}
}
}
}
}
}
# Add the extracted row_numbers to the main list if any were found
if (length(sublist_row_numbers) > 0) {
row_numbers_list[[length(row_numbers_list) + 1]] <- sublist_row_numbers
}
}
# Flatten the nested lists into simple vectors and print them
flattened_list <- lapply(row_numbers_list, function(x) unlist(x))
print(flattened_list)
num_colors <- length(flattened_list) # Number of groups
colors <- distinctColorPalette(num_colors)
# Step 2: Update the nodes dataframe with these colors
for (i in 1:num_colors) {
group <- flattened_list[[i]]
color <- colors[i]
# Update the color for each node in the group
nodes[nodes$id %in% group, "color.background"] <- color
}
print(nodes)
flattened_list <- lapply(row_numbers_list, function(x) unlist(x))
print(flattened_list)
runApp('Documents/GitHub/hollieceg/app copy.R')
runApp('Documents/GitHub/hollieceg/app copy.R')
runApp('Documents/GitHub/hollieceg/app copy.R')
runApp('Documents/GitHub/hollieceg/app copy.R')
runApp('Documents/GitHub/hollieceg/app copy.R')
runApp('Documents/GitHub/hollieceg/app copy.R')
runApp('Documents/GitHub/hollieceg/app copy.R')
runApp('Documents/GitHub/hollieceg/app copy.R')
?left_join
runApp('Documents/GitHub/hollieceg/app copy.R')
runApp('Documents/GitHub/hollieceg/app copy.R')
?summarize
runApp('Documents/GitHub/hollieceg/app copy.R')
runApp('Documents/GitHub/hollieceg/app copy.R')
runApp('Documents/GitHub/hollieceg/app copy.R')
?seq_len
runApp('Documents/GitHub/hollieceg/app copy.R')
runApp('Documents/GitHub/hollieceg/app copy.R')
runApp('Documents/GitHub/hollieceg/app copy.R')
runApp('Documents/GitHub/hollieceg/app copy.R')
write_csv(homicide_data2)
write_csv(homicide_data2, homicide_data2)
write_csv(homicide_data2, "homicide_data2")
write_csv(homicide_data2, "homicide_data2.csv")
runApp('Documents/GitHub/hollieceg/app copy.R')
runApp('Documents/GitHub/hollieceg/app copy.R')
runApp('Documents/GitHub/hollieceg/app copy.R')
runApp('Documents/GitHub/hollieceg/app copy.R')
library(shiny); runApp('app copy.R')
runApp('app copy.R')
runApp('app copy.R')
runApp('~/Downloads/app copy-2.R')
runApp('app copy.R')
runApp('app copy.R')
runApp('app copy.R')
runApp('app copy.R')
?round
runApp('app copy.R')
?left_join
runApp('app copy.R')
runApp('~/Downloads/app copy-3.R')
runApp('app copy.R')
install.packages("catdata")
reader <- data(reader)
library(catdata)
reader <- data(reader)
reader <- data(reader)
data(reader)
View(reader)
library(tidyr)
reader <- reader %>%
uncount(Freq)
reader$RegularReader <- factor(reader$RegularReader, levels = c(0, 1), labels = c("No", "Yes"))
reader$Working <- factor(reader$Working, levels = c(0, 1), labels = c("No", "Yes"))
reader$Age <- factor(reader$Age, levels = c(1, 2, 3), labels = c("18–29 years", "30–39 years", "40–49 years"))
reader$Education <- factor(reader$Education, levels = c(11, 12, 13, 14), labels = c("L1", "L2", "L3", "L4"))
write.csv(reader, file = "reader.csv", row.names = FALSE)
runApp('app copy.R')
runApp('app copy.R')
library(readr)
homicides <- read_csv("homicides.csv")
View(homicides)
runApp('app copy.R')
View(homicides)
runApp('app copy.R')
runApp('app copy.R')
runApp('app copy.R')
runApp('~/Downloads/app copy-3.R')
runApp('~/Downloads/app copy-2.R')
