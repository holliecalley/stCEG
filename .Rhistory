stages(mod)["OUT", AGE = "child", ICU = "1"] <- "ECICU"
stages(mod)["RSP", AGE = "child", ICU = "0"] <- "UNOBS"
stages(mod)["OUT", AGE = "child", ICU = "0"] <- "UNOBS"
mod <- stndnaming(mod, ignore = c("UNOBS"))
stages(mod)["OUT", ICU = "0", RSP = "intub"] <- "UNOBS"
mod <- stndnaming(mod,ignore="UNOBS")
train <- trajectories[1:2000,]
mod0 <- sevt_fit(mod, train, lambda = 0)
prob(mod0, c(RSP = "intub"), conditional_on = c(OUT = "survived", ICU = "1"))
predict(mod0, newdata = data.frame(SEX = "male", AGE = "adult"), class = "ICU")
predict(mod0, newdata = data.frame(SEX = "male", AGE = "adult"), class = "ICU")
newdata = data.frame(SEX = "male", AGE = "adult")
predict(mod0, newdata = data.frame(SEX = "male", AGE = "adult"), class = "ICU")
?predict
names(mod0$model)
names(mod0$tree)
predict(mod0$tree, newdata = data.frame(SEX = "male", AGE = "adult"), class = "ICU")
head(trajectories)
write.csv(trajectories, trajectories.csv)
write.csv(trajectories, "trajectories.csv")
mod_f1 <- full(train, order = colnames(train), join_unobserved = T)
mod_f2 <- full(train, join_unobserved = F, lambda = 1)
mod_i <- indep(train)
runApp('Documents/GitHub/stCEG/stCEG.R')
runApp('Documents/GitHub/stCEG/stCEG.R')
runApp('Documents/GitHub/stCEG/stCEG.R')
runApp('Documents/GitHub/stCEG/stCEG.R')
write_csv(train, "train.csv")
runApp('Documents/GitHub/stCEG/stCEG.R')
load("~/Downloads/lm.RData")
View(happy)
View(bio)
library("BayesNetBP")
node.class <- rep(c(TRUE, FALSE), c(3, 6))
install.packages("graph")
library("BayesNetBP")
install.packages("BayesNetBP")
library("BayesNetBP")
library("qtlnet")
library("igraph")
library("qtl")
models.qtl <- LocalModelCompile(data = qtlnet.fit)
if (interactive()) {
runBayesNetApp()
}
install.packages('rsconnect')
library(rsconnect)
rsconnect::setAccountInfo(name='holliecalley',
token='63E088967248DB5EE8BD884AC053E773',
secret='<SECRET>')
rsconnect::setAccountInfo(name='holliecalley', token='63E088967248DB5EE8BD884AC053E773', secret='JQ0hssQg9nV2rtZHkpQiNyr2b0mcKOSofWVsdMJX')
library(rsconnect)
rsconnect::deployApp('/Users/holliecalley/Documents/GitHub/stCEG/stCEG.R')
library(rsconnect)
rsconnect::deployApp('Documents/GitHub/stCEG/stCEG.R')
library(rsconnect)
rsconnect::deployApp('/Users/holliecalley/Documents/GitHub/stCEG.R')
library(rsconnect)
rsconnect::deployApp('/Users/holliecalley/Documents/GitHub/stCEG/stCEG.R')
library(shiny); runApp('Documents/GitHub/stCEG/stCEG.R')
rsconnect::deployApp(appDir = "/Users/holliecalley/Documents/GitHub/stCEG", appPrimaryDoc = "stCEG.R")
tree <- list(SEX = c("male", "female"),
AGE = c("child", "adult", "elder"),
ICU = c("0", "1"),
RSP = c("intub", "mask", "no"),
OUT = c("death", "survived"))
library(stagedtrees)
mod <- sevt(tree, full = T, order = c("SEX","AGE","ICU","RSP","OUT"))
mod
plot(mod)
stages(mod)["ICU", AGE = "child"] <- "ICUchild"
stages(mod)["ICU", AGE = "elder"] <- "ICUelder"
mod$stages$ICU
stages(mod)["RSP", AGE = "child", ICU = "1"] <-
stages(mod)["RSP", AGE = "elder", ICU = "1"]
stages(mod)["OUT", AGE = "adult", ICU = "1", RSP = c("intub", "mask")] <- "AICUR"
plot(mod)
stages(mod)["RSP", AGE = "child", ICU = "0"] <- "UNOBS"
stages(mod)["OUT", AGE = "child", ICU = "0"] <- "UNOBS"
mod <- stndnaming(mod, ignore = c("UNOBS"))
stages(mod)
plot(mod, ignore = c("UNOBS")
)
plot(mod, cex_nodes = c(2,2,2,1.5,0), cex_label_edges = 0.5, cex_label_nodes = c(0,0,0,0,0.8), ignore = "UNOBS")
plot(mod,
col = \(stages) hcl.colors(length(stages), "Dark 3"),
cex_nodes = 1, cex_label_edges = 0.5, ignore = "UNOBS")
g <- as_igraph(mod, ignore = "UNOBS")
ggraph(g, "sugiyama") +
geom_edge_fan(
aes(
# remove edge labels from last variable
label = ifelse(label %in% mod$tree$OUT, "", label),
label_pos = 0.5,
vjust = sapply(label, function(l){
if (l == "0") return(1.2)
if (l == "child") return(1.2)
if (l == "intub") return(1.2)
if (l == "mask") return(0.4)
return(-0.3)
})
),
angle_calc = "along", show.legend = FALSE, check_overlap = FALSE,
end_cap = circle(0.02, "npc"),
arrow = grid::arrow(
angle = 25,
length = unit(0.025, "npc"),
type = "closed"
)
) +
geom_node_point(aes(x = x, y = y, color = paste0(var,".",stage)),
size = 5,
show.legend =FALSE
) + scale_color_manual(values = unlist(colors)) +
ggforce::theme_no_axes() + coord_flip() + scale_y_reverse() +
theme(panel.border = element_blank())
library("ggplot2")
library("ggraph")
ggraph(g, "sugiyama") +
geom_edge_fan(
aes(
# remove edge labels from last variable
label = ifelse(label %in% mod$tree$OUT, "", label),
label_pos = 0.5,
vjust = sapply(label, function(l){
if (l == "0") return(1.2)
if (l == "child") return(1.2)
if (l == "intub") return(1.2)
if (l == "mask") return(0.4)
return(-0.3)
})
),
angle_calc = "along", show.legend = FALSE, check_overlap = FALSE,
end_cap = circle(0.02, "npc"),
arrow = grid::arrow(
angle = 25,
length = unit(0.025, "npc"),
type = "closed"
)
) +
geom_node_point(aes(x = x, y = y, color = paste0(var,".",stage)),
size = 5,
show.legend =FALSE
) + scale_color_manual(values = unlist(colors)) +
ggforce::theme_no_axes() + coord_flip() + scale_y_reverse() +
theme(panel.border = element_blank())
edge_label <- function(edge) {
if (edge$var %in% c("SEX", "AGE")) {
return(edge$label)
} else if (edge$var == "ICU"){
return(ifelse(edge$label == "1", "ICU", "no-ICU"))
} else if (edge$var %in% c("RSP")){
return(paste("\\small", edge$label))
}else {
return("")
}
}
write_tikz(mod, col = colors, ignore = "UNOBS",
node_label = \(x) "",
edge_label = edge_label,
edge_label_options = \(e) c("sloped", "pos=0.7"))
ggraph(g_ceg, "sugiyama") +
geom_edge_fan(
aes(
label = paste0(ifelse(var == "ICU", paste0(var, "="), ""), label),
color = label,
label_pos = 0.5 + runif(length(label), -0.1, 0.1)
),
angle_calc = "along",
show.legend = FALSE,
check_overlap = FALSE,
end_cap = circle(0.02, "npc"),
arrow = grid::arrow(
angle = 25,
length = unit(0.025, "npc"),
type = "closed"
)
) +
geom_node_point(aes(
x = x,
y = y,
color = paste0(var, ".", stage)
),
size = 3,
show.legend = FALSE) +
scale_color_manual(values = unlist(colors)) +
ggforce::theme_no_axes() + coord_flip() + scale_y_reverse() +
theme(panel.border = element_blank())
stages(mod)
mod$prob <- list()
mod$prob$SEX <- list( "NA" = c("male" = 0.4, "female" = 0.6))
mod$prob$AGE <- list("1" = c("child" = 0.1,
"adult" = 0.5,
"elder" = 0.4),
"2" = c("child" = 0.1,
"adult" = 0.3,
"elder" = 0.6))
mod$prob$ICU <- list("1" = c("0" = 0, "1" = 1),
"2" = c("0" = 0.4, "1" = 0.6), # male adult/elder
"3" = c("0" = 0.2, "1" = 0.8), # female adult
"4" = c("0" = 0.7, "1" = 0.3)) # female elder
prob(mod0)
?prob()
?prob(mod, trajectories)
prob(mod, trajectories)
prob(mod, x = c(SEX = "male", AGE = "elder", RSP = "intub"))
mod$prob <- list()
mod$prob$SEX <- list( "NA" = c("male" = 0.4, "female" = 0.6))
mod$prob$AGE <- list("1" = c("child" = 0.1,
"adult" = 0.5,
"elder" = 0.4),
"2" = c("child" = 0.1,
"adult" = 0.3,
"elder" = 0.6))
mod$prob$ICU <- list("1" = c("0" = 0, "1" = 1),
"2" = c("0" = 0.4, "1" = 0.6), # male adult/elder
"3" = c("0" = 0.2, "1" = 0.8), # female adult
"4" = c("0" = 0.7, "1" = 0.3)) # female elder
mod$prob$RSP <- list("1" = c("0" = 0, "1" = 1),
+                      "2" = c("0" = 0.4, "1" = 0.6), # male adult/elder
train <- trajectories[1:2000,]
mod0 <- sevt_fit(mod, train, lambda = 0)
mod0$prob
predict(mod0, newdata = trajectories[2001:3000,])
predict(mod0, newdata = trajectories[2001:3000,], class = "OUT")
H <- predict(mod0, newdata = trajectories[2001:3000,], class = "OUT")
H2 <- as.data.frame(H)
View(H2)
H <- predict(mod0, newdata = trajectories[2001:3000,], class = C("RSP", "OUT"))
H <- predict(mod0, newdata = trajectories[2001:3000,], class = c("RSP", "OUT"))
H <- predict(mod0, newdata = trajectories[2001:3000,], class = c("RSP", "OUT"))
H <- predict(mod0, newdata = trajectories[2001:3000,], class = c("OUT"))
H3 <- predict(mod0, newdata = trajectories[2001:3000,], class = c("OUT"))
H2 <- as.data.frame(c(H, H3))
H <- predict(mod0, newdata = trajectories[2001:3000,], class = c("OUT"))
H3 <- predict(mod0, newdata = trajectories[2001:3000,], class = c("OUT"))
H2 <- as.data.frame(H)
H4 <- as.data.frame(H3)
H5 <- rbind(H2, H4)
H5 <- rbind(c(H2, H4))
View(H5)
total <- merge(H2,H4)
View(total)
View(H4)
View(train)
view(H)
load("~/Documents/GitHub/stCEG/homicides.csv")
load("~/Documents/GitHub/stCEG/homicides.csv")
library(readr)
homicides <- read_csv("Documents/GitHub/stCEG/homicides.csv")
View(homicides)
sample <- homicides[c(1,2,4,5)]
mod <- sevt(sample, full = T)
mod
plot(mod)
g <- as_igraph(mod, ignore = "UNOBS")
ggraph(g, "sugiyama") +
geom_edge_fan(
aes(
# remove edge labels from last variable
label = ifelse(label %in% mod$tree$OUT, "", label),
label_pos = 0.5,
vjust = sapply(label, function(l){
if (l == "0") return(1.2)
if (l == "child") return(1.2)
if (l == "intub") return(1.2)
if (l == "mask") return(0.4)
return(-0.3)
})
),
angle_calc = "along", show.legend = FALSE, check_overlap = FALSE,
end_cap = circle(0.02, "npc"),
arrow = grid::arrow(
angle = 25,
length = unit(0.025, "npc"),
type = "closed"
)
) +
geom_node_point(aes(x = x, y = y, color = paste0(var,".",stage)),
size = 5,
show.legend =FALSE
) + scale_color_manual(values = unlist(colors)) +
ggforce::theme_no_axes() + coord_flip() + scale_y_reverse() +
theme(panel.border = element_blank())
plot(mod,
col = \(stages) hcl.colors(length(stages), "Dark 3"),
cex_nodes = 1, cex_label_edges = 0.5, ignore = "UNOBS")
ggraph(g, "sugiyama") +
geom_edge_fan(
aes(
# remove edge labels from last variable
label = ifelse(label %in% mod$tree$OUT, "", label),
label_pos = 0.5,
vjust = sapply(label, function(l){
if (l == "0") return(1.2)
if (l == "child") return(1.2)
if (l == "intub") return(1.2)
if (l == "mask") return(0.4)
return(-0.3)
})
),
angle_calc = "along", show.legend = FALSE, check_overlap = FALSE,
end_cap = circle(0.02, "npc"),
arrow = grid::arrow(
angle = 25,
length = unit(0.025, "npc"),
type = "closed"
)
) +
geom_node_point(aes(x = x, y = y, color = paste0(var,".",stage)),
size = 5,
show.legend =FALSE
) + scale_color_manual(values = unlist(colors)) +
ggforce::theme_no_axes() + coord_flip() + scale_y_reverse() +
theme(panel.border = element_blank())
homicides <- homicides$Year = 2003
homicides <- homicides$Year == 2003
load("~/Documents/GitHub/stCEG/homicides.csv")
library(readr)
homicides <- read_csv("Documents/GitHub/stCEG/homicides.csv")
View(homicides)
homicides <- filter(homicides, Year == 2003)
sample <- homicides[c(1,2,4,5)]
mod <- sevt(sample, full = T)
mod
plot(mod)
ggraph(g, "sugiyama") +
geom_edge_fan(
aes(
# remove edge labels from last variable
label = ifelse(label %in% mod$tree$OUT, "", label),
label_pos = 0.5,
vjust = sapply(label, function(l){
if (l == "0") return(1.2)
if (l == "child") return(1.2)
if (l == "intub") return(1.2)
if (l == "mask") return(0.4)
return(-0.3)
})
),
angle_calc = "along", show.legend = FALSE, check_overlap = FALSE,
end_cap = circle(0.02, "npc"),
arrow = grid::arrow(
angle = 25,
length = unit(0.025, "npc"),
type = "closed"
)
) +
geom_node_point(aes(x = x, y = y, color = paste0(var,".",stage)),
size = 5,
show.legend =FALSE
) + scale_color_manual(values = unlist(colors)) +
ggforce::theme_no_axes() + coord_flip() + scale_y_reverse() +
theme(panel.border = element_blank())
edge_label <- function(edge) {
if (edge$var %in% c("SEX", "AGE")) {
return(edge$label)
} else if (edge$var == "ICU"){
return(ifelse(edge$label == "1", "ICU", "no-ICU"))
} else if (edge$var %in% c("RSP")){
return(paste("\\small", edge$label))
}else {
return("")
}
}
summary(mod)
summary(mod0)
summary(mod)
mod <- sevt(sample, full = T)
mod
mod0 <- sevt_fit(mod, sample, lambda = 0)
mod0$prob$SEX <- list( "NA" = c("male" = 0.4, "female" = 0.6))
summary(mod0)
mod0$prob$SEX <- list( "Age_Group" = c("Adolescent/Young Adult" = 0.4, "Child" = 0.2, "Elderly" = 0.2, "Adult" = 0.2))
summary(mod0)
mod0$prob$Age_Group <- list( "Age_Group" = c("Adolescent/Young Adult" = 0.4, "Child" = 0.2, "Elderly" = 0.2, "Adult" = 0.2))
summary(mod0)
mod0$prob$Age_Group <- list( "NA" = c("Adolescent/Young Adult" = 0.4, "Child" = 0.2, "Elderly" = 0.2, "Adult" = 0.2))
summary(mod0)
mod0$prob$Age_Group <- list( 1 = c("Adolescent/Young Adult" = 0.4, "Child" = 0.2, "Elderly" = 0.2, "Adult" = 0.2))
mod0$prob$Age_Group <- list( "1" = c("Adolescent/Young Adult" = 0.4, "Child" = 0.2, "Elderly" = 0.2, "Adult" = 0.2))
summary(mod0)
mod0$prob$Age_Group
mod0$prob$Sex
summary(mod0)
mod0$prob$Age_Group <- list( "NA" = c("Adolescent/Young Adult" = 0.4, "Child" = 0.2, "Elderly" = 0.2, "Adult" = 0.2))
summary(mod0)
mod_ceg <- stages_bhc(sevt_fit(mod, trajectories,lambda=0), ignore= "UNOBS")
mod <- sevt(sample, full = T)
mod
plot(mod)
mod <- sevt(tree, full = T)
mod
plot(mod)
mod <- stndnaming(mod, ignore = c("UNOBS"))
stages(mod)
mod1 <- sevt_fit(mod, train)
mod1 <- sevt_fit(mod, train, lambda = 0)
summary(mod1)
mod1$prob$SEX <- list( "NA" = c("male" = 0.4, "female" = 0.6))
summary(mod1)
summary(mod)
summary(mod0$prob)
prob(mod1)
summary(mod1$prob)
summary(mod1)
mod$prob$SEX <- list( "NA" = c("male" = 0.4, "female" = 0.6))
mod1 <- sevt_fit(mod, train, lambda = 0)
summary(mod1)
mod <- sevt(tree, full = T)
mod
mod <- sevt(tree, full = T)
mod
mod <- sevt(tree, full = T)
mod
mod1 <- sevt_fit(mod, train, lambda = 0)
summary(mod1)
mod <- sevt(tree, full = T)
mod
mod$prob$SEX <- list( "NA" = c("male" = 0.9, "female" = 0.1))
mod1 <- sevt_fit(mod, train, lambda = 0)
summary(mod1)
stages(mod)["RSP", AGE = "child", ICU = "0"] <- "UNOBS"
stages(mod)["OUT", AGE = "child", ICU = "0"] <- "UNOBS"
mod <- stndnaming(mod, ignore = c("UNOBS"))
stages(mod)
plot(mod, ignore = c("UNOBS"))
g <- as_igraph(mod, ignore = "UNOBS")
ggraph(g, "sugiyama") +
geom_edge_fan(
aes(
# remove edge labels from last variable
label = ifelse(label %in% mod$tree$OUT, "", label),
label_pos = 0.5,
vjust = sapply(label, function(l){
if (l == "0") return(1.2)
if (l == "child") return(1.2)
if (l == "intub") return(1.2)
if (l == "mask") return(0.4)
return(-0.3)
})
),
angle_calc = "along", show.legend = FALSE, check_overlap = FALSE,
end_cap = circle(0.02, "npc"),
arrow = grid::arrow(
angle = 25,
length = unit(0.025, "npc"),
type = "closed"
)
) +
geom_node_point(aes(x = x, y = y, color = paste0(var,".",stage)),
size = 5,
show.legend =FALSE
) + scale_color_manual(values = unlist(colors)) +
ggforce::theme_no_axes() + coord_flip() + scale_y_reverse() +
theme(panel.border = element_blank())
### Learning a staged tree we will learn about this later
mod_ceg <- stages_bhc(sevt_fit(mod, trajectories,lambda=0), ignore= "UNOBS")
## Defining the CEG
ceg_mod <- ceg(mod_ceg)
g_ceg <- as_igraph(ceg_mod, ignore = "UNOBS")
colors <- make_stages_col(mod,
col = \(stages) hcl.colors(n = length(stages), "Dark 3"))
ggraph(g_ceg, "sugiyama") +
geom_edge_fan(
aes(
label = paste0(ifelse(var == "ICU", paste0(var, "="), ""), label),
color = label,
label_pos = 0.5 + runif(length(label), -0.1, 0.1)
),
angle_calc = "along",
show.legend = FALSE,
check_overlap = FALSE,
end_cap = circle(0.02, "npc"),
arrow = grid::arrow(
angle = 25,
length = unit(0.025, "npc"),
type = "closed"
)
) +
geom_node_point(aes(
x = x,
y = y,
color = paste0(var, ".", stage)
),
size = 3,
show.legend = FALSE) +
scale_color_manual(values = unlist(colors)) +
ggforce::theme_no_axes() + coord_flip() + scale_y_reverse() +
theme(panel.border = element_blank())
summary(mod)
prob(mod_ceg)
prob(mod)
prob(ceg_mod)
?prob
summary(ceg_mod)
runApp('Documents/GitHub/stCEG/stCEG.R')
runApp('Documents/GitHub/stCEG/stCEG.R')
?inner_join
runApp('Documents/GitHub/stCEG/stCEG.R')
library(readr)
falls_test <- read_csv("Documents/GitHub/stCEG/falls_test.csv",
col_types = cols(...5 = col_skip(), ...6 = col_skip()))
View(falls_test)
write.csv(falls_test, "Documents/GitHub/stCEG/falls_test.csv")
?write_csv
setwd("~/Documents/GitHub/stCEG")
write.csv(falls_test, "falls_test.csv")
runApp('stCEG.R')
runApp('stCEG.R')
runApp('stCEG.R')
runApp('stCEG.R')
